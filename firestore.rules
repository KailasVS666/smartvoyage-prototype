rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Groups collection: allow only group members to read
    match /groups/{groupId} {
      allow read: if request.auth != null &&
        resource.data.members.map(m => m.uid).hasAny([request.auth.uid]);
      // Only admins can write/update/delete the group
      allow write: if request.auth != null &&
        resource.data.members.where(m => m.role == 'admin').map(m => m.uid).hasAny([request.auth.uid]);
    }

    // Trips collection - allow if user is owner or in group
    match /trips/{tripId} {
      allow read: if isTripOwner() || isGroupRole('admin') || isGroupRole('editor') || isGroupRole('viewer');
      allow write: if isTripOwner() || isGroupRole('admin') || isGroupRole('editor');
      allow create: if request.auth != null && (
        // Owner
        request.auth.uid == request.resource.data.userId ||
        // Group member (for group trip creation)
        (
          request.resource.data.groupId is string &&
          exists(/databases/$(database)/documents/groups/$(request.resource.data.groupId)) &&
          get(/databases/$(database)/documents/groups/$(request.resource.data.groupId)).data.members.map(m => m.uid).hasAny([request.auth.uid])
        )
      );
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

function isTripOwner() {
  return request.auth != null && request.auth.uid == resource.data.userId;
}

function isGroupRole(role) {
  return resource.data.groupId is string &&
    exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
    get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members
      .filter(m => m.uid == request.auth.uid && m.role == role).size() > 0;
} 